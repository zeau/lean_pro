<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

    <!-- 开启AOP监听 只对当前配置文件有效 -->
    <aop:aspectj-autoproxy expose-proxy="true"/>
    <!--配置数据源 druid -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">

        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />


        <property name="filters" value="stat" />

        <!-- 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="timeBetweenEvictionRunsMillis" value="30" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="30" />


        <!-- 连接池初始化连接数 -->
        <property name="initialSize" value="5" />
        <property name="minIdle" value="5" />
        <property name="maxActive" value="20" />
    </bean>
    <!-- 配置数据源 c3p0 -->
  <!--  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">

        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        &lt;!&ndash; 请求超时时间 &ndash;&gt;
        <property name="checkoutTimeout" value="30000" />
        &lt;!&ndash; 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 &ndash;&gt;
        <property name="idleConnectionTestPeriod" value="30" />
        &lt;!&ndash; 连接数据库连接池最大空闲时间 &ndash;&gt;
        <property name="maxIdleTime" value="30" />
        &lt;!&ndash; 连接池初始化连接数 &ndash;&gt;
        <property name="initialPoolSize" value="5" />
        <property name="minPoolSize" value="5" />
        <property name="maxPoolSize" value="20" />
        &lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 &ndash;&gt;
        <property name="acquireIncrement" value="5" />
    </bean>-->


    <!-- 配置hibernate的SessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- 注入数据源 相关信息看源码 -->
        <property name="dataSource" ref="dataSource" />
        <!-- hibernate配置信息 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>

                <!--&lt;!&ndash; 开启二级缓存 ehcache &ndash;&gt;-->
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}
                </prop>


            </props>
        </property>
        <!-- 扫描hibernate注解配置的entity -->
        <property name="packagesToScan" >
            <list>
                <value>com.bidanet.bdcms.dev.entity</value>
            </list>
        </property>
    </bean>

    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
        <property name="cacheQueries">
            <value>true</value>
        </property>
    </bean>
    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- 配置事务增强处理Bean，指定事务管理器 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <!-- 配置详细事务处理语义 -->
        <tx:attributes>
            <!--使用T后缀，为需要事务支持，则需要事务支持-->
            <tx:method name="*T" propagation="REQUIRED"  />
            <tx:method name="*Tr" propagation="REQUIRED"  />
            <!--开启新事务，各自管自己-->
            <tx:method name="*Trn" propagation="REQUIRES_NEW"  />
            <!--嵌套事务，子事务，子做自己之前的，主事务管理整个的-->
            <tx:method name="*Tn" propagation="NESTED"  />
            <!--当前存在事务，则按事务执行，没有则以非事务执行-->
            <tx:method name="*Ts" propagation="SUPPORTS"  />

            <!-- 其他采用默认事务方式 -->
            <tx:method name="*" propagation="NOT_SUPPORTED" read-only="true"  />

        </tx:attributes>
    </tx:advice>

    <!-- Spring aop事务管理 -->
    <aop:config expose-proxy="true" proxy-target-class="true">

        <!-- 指定在txAdvice切入点应用txAdvice事务增强处理 -->
        <aop:advisor pointcut="execution(* com.bidanet.bdcms.core.service..*Impl.*(..))"
                     advice-ref="transactionAdvice" />
      <!--  <aop:advisor advice-ref="transactionAdvice"
                     pointcut="execution(* com.bidanet.bdcms.core.plugin.*.service..*Impl.*(..))"/>-->

    </aop:config>

</beans>